R-2.8 Illustrate the performance of the selection-sort algorithm on the
 following input sequence (22, 15, 26, 44, 10, 3, 9, 13, 29, 25). 

_________________________________________________________
22, 15, 26, 44, 10, 3, 9, 13, 29, 25.    Find the smaller 3
____________________________________________________
22, 15, 26, 44, 10, 3, 9, 13, 29, 25.    Swap 3 and 22
___________________________________________________
3,15, 26, 44, 10,22, 9, 13, 29, 25.      Find the smaller 9
_________________________________________________________
3,9, 26, 44, 10,22, 15, 13, 29, 25.      Swap  9 and 15
_______________________________________________________
3,9, 26, 44, 10,22, 15, 13, 29, 25.      Find smaller 10
________________________________________________________
3,9,10, 44, 26,22, 15, 13, 29, 25.       Swap  10 and 22
_______________________________________________________
3,9,10, 44, 26,22, 15, 13, 29, 25.       Find smaller 13
_______________________________________________________________
3,9,10, 13, 26,22, 15, 44, 29, 25.        Swap 13 and 44
_______________________________________________________________
3,9,10, 13, 26,22, 15, 44, 29, 25.        Find smaller  15
___________________________________________________________
3,9,10, 13, 15,22, 26, 44, 29, 25.        Swap   15 and 26
___________________________________________________________
3,9,10, 13, 15,22, 26, 44, 29, 25.        Find smaller   22
_________________________________________________________________
3,9,10, 13, 15,22, 26, 44, 29, 25.        Swap
_______________________________________________________________
3,9,10, 13, 15,22, 26, 44, 29, 25.        Find Smaller 25
____________________________________________________________________
3,9,10, 13, 15,22, 25, 44, 29, 26.        Swap  25 and 26
________________________________________________________________
3,9,10, 13, 15,22, 25, 26,44, 29        Swap  25 and 26
________________________________________________________
3,9,10, 13, 15,22, 25, 26,29,44           Swap  26 and 229
_____________________________________________________________


R-2.9 Illustrate the performance of the insertion-sort 
algorithm on the input sequence of the previous problem. 
_________________________________________________________________
22, 15, 26, 44, 10, 3, 9, 13, 29, 25.   Shift if less than
___________________________________________________________________
15, 22, 26, 44, 10, 3, 9, 13, 29, 25.   Shift if less than
____________________________________________________________________
15, 22, 26, 44, 10, 3, 9, 13, 29, 25.   Shift if less than
______________________________________________________________
15, 22, 26, 44, 10, 3, 9, 13, 29, 25.   Shift if less than
__________________________________________________________________
15, 22, 26, 44, 10, 3, 9, 13, 29, 25.   Shift if less than
_________________________________________________________________
15, 22, 26, 44, 10, 3, 9, 13, 29, 25.   Shift if less than
_____________________________________________________________________
10,15, 22, 26, 44, 3, 9, 13, 29, 25.    Shift if less than
_________________________________________________________________
3,10,15, 22, 26, 44,9, 13, 29, 25.      Shift if less than
_____________________________________________________________________
3,9,10,15, 22, 26, 44,13, 29, 25.       Shift if less than
________________________________________________________________
3,9,10,13,15, 22, 26, 44,29, 25.        Shift if less than
_____________________________________________________________
3,9,10,13,15, 22, 26,29, 44, 25.        Shift if less than
___________________________________________________________________
3,9,10,13,15, 22, 25,26,29, 44          Shift if less than finally sorted elements
=====================================================================================




R-2.10 Give an example of a worst-case sequence with n elements for insertion-sort that runs in 
Î©(n2) time on such a sequence.
Answer
It is only condition that the array is sorted but if it is in a reverse order then it takes the 
maximum time to take the element to the last index of the sequence.

Level 2:
2. Use one of these sorts from 1 above to implement in JavaScript another version of 
isPermutation(A,B). First start with the pseudo-code, then translate into JavaScript. 
Submit both the pseudo-code and the JavaScript program file with test cases. 

Level.2
Algorthim isPermation(A,B)
   If A.length!=B.length                                            1  
            return false;                                           1
      heapsort(A)                                                  nlogn
      heapsort(B)                                                 nlogn
    for i:=0 to A.length do                                         n
         if A[i]!=B[i]                                               n
              return false   
                                                                     1
return true;                                                         1

                                                                     
             NB:Big O of this is O(nlogn+n)
